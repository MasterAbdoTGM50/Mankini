buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

version = "${version}"
group = 'matgm50.mankini' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mankini-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: "${mcp_channel}", version: "${mcp_mappings}"

	runs {
		client {
			workingDirectory project.file('run')
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			mods {
				mankini {
					source sourceSets.main
				}
			}
		}
		server {
			workingDirectory project.file('run')
			// Recommended logging data for a userdev environment
			//  property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			mods {
				mankini {
					source sourceSets.main
				}
			}
		}
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
		attributes([
            "Specification-Title": "mankini",
            "Specification-Vendor": "MasterAbdoTGM50",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"mankini",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}